@model AplicacionReservas.Models.Reserva
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Crear Reserva";
    var today = DateTime.Today;
    int daysUntilNextMonday = ((int)DayOfWeek.Monday - (int)today.DayOfWeek + 7) % 7;
    var nextMonday = today.AddDays(daysUntilNextMonday == 0 ? 7 : daysUntilNextMonday);
    var nextSunday = nextMonday.AddDays(6);
    var minDate = nextMonday.ToString("yyyy-MM-dd");
    var maxDate = nextSunday.ToString("yyyy-MM-dd");
}

<h2 class="mb-4">Crear Reserva</h2>

@if (!ViewData.ModelState.IsValid)
{
    <div class="alert alert-danger">
        @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
        {
            <p>@error.ErrorMessage</p>
        }
    </div>
}

<form asp-action="Crear" method="post" enctype="multipart/form-data" class="needs-validation" novalidate id="formReserva">

    <!-- Barra de progreso -->
    <div class="progress mb-4" style="height: 25px;">
        <div id="barraProgreso" class="progress-bar bg-black text-white fw-bold" role="progressbar" style="width: 16.6%;" aria-valuenow="1" aria-valuemin="0" aria-valuemax="6">
            Paso 1 de 6
        </div>
    </div>

    <!-- Paso 1: Información general -->
    <div class="form-step">
        <div class="card mb-4">
            <div class="card-header">Información general</div>
            <div class="card-body row g-3">
                <!-- aquí va todo lo que ya tienes de información general -->
                <div class="col-md-4">
                    <label class="form-label">Fecha</label>
                    <input asp-for="Fecha" type="date" class="form-control"
                           min="@minDate" max="@maxDate" required />
                    <span asp-validation-for="Fecha" class="text-danger"></span> 
                </div>
                <div class="col-md-4">
                    <label class="form-label">Laboratorio</label>
                    <select asp-for="LaboratorioId" asp-items="@(new SelectList(ViewBag.Laboratorios, "Id", "Nombre"))" class="form-select" required></select>
                </div>
                <div class="col-md-4">
                    <label class="form-label">Duración (en horas)</label>
                    <select id="duracionReserva" name="DuracionHoras" class="form-select" required>
                        <option value="">Seleccione duración</option>
                        <option value="1">1 hora</option>
                        <option value="2">2 horas</option>
                        <option value="3">3 horas</option>
                    </select>
                </div>
                <div class="col-md-4">
                    <label class="form-label">Módulo horario</label>
                    <select id="moduloHorario" name="ModuloHorarioId" class="form-select" required>
                        <option value="">Seleccione módulo horario</option>
                    </select>
                </div>
                <div class="col-md-4">
                    <label class="form-label">Docente</label>
                    <select asp-for="DocenteId" asp-items="@(new SelectList(ViewBag.Docentes, "Id", "Nombre"))" class="form-select" required></select>
                </div>
                <div class="col-md-4">
                    <label class="form-label">Materia</label>
                    <input asp-for="Materia" class="form-control" required />
                </div>
                <div class="col-md-4">
                    <label class="form-label">Nombre del proyecto</label>
                    <input asp-for="NombreProyecto" class="form-control" required />
                </div>
                <div class="col-md-8">
                    <label class="form-label">Actividad</label>
                    <input asp-for="Actividad" class="form-control" required />
                </div>
                <div class="col-md-12">
                    <label class="form-label">Evidencia del correo aprobado</label>
                    <input asp-for="EvidenciaCorreoRuta" type="file" accept="image/*" class="form-control" required />
                </div>
            </div>
        </div>
        <div class="d-flex justify-content-end">
            <button type="button" class="btn btn-dark" id="nextBtn1">Siguiente</button>
        </div>
    </div>

    <!-- Paso 2: Miembros del equipo -->
    <div class="form-step" style="display:none;">
        <div class="card mb-4">
            <div class="card-header">Miembros del equipo</div>
            <div class="card-body" id="equipo-container">
                <div class="row g-3 mb-3 miembro-item">
                    <div class="col-md-4">
                        <input name="miembros[0].Nombre" class="form-control" placeholder="Nombre del miembro" required />
                    </div>
                    <div class="col-md-1 d-flex align-items-center">
                        <button type="button" class="btn btn-sm btn-danger" onclick="eliminarMiembro(this)">X</button>
                    </div>
                </div>
            </div>
            <div class="card-footer">
                <button type="button" class="btn btn-sm btn-outline-dark" onclick="agregarMiembro()">Agregar miembro</button>
            </div>
        </div>
        <div class="d-flex justify-content-between">
            <button type="button" class="btn btn-secondary" id="prevBtn2">Anterior</button>
            <button type="button" class="btn btn-dark" id="nextBtn2">Siguiente</button>
        </div>
    </div>

    <!-- Paso 3: Insumos -->
    <div class="form-step" style="display:none;">
        <div class="card mb-4">
            <div class="card-header">Insumos</div>
            <div class="card-body" id="insumo-container">
                <div class="row g-3 mb-3 insumo-item">
                    <div class="col-md-6">
                        <input name="insumos[0].Nombre" class="form-control" placeholder="Nombre del insumo" required />
                    </div>
                    <div class="col-md-4">
                        <input name="insumos[0].Cantidad" class="form-control" type="number" min="1" placeholder="Cantidad" required />
                    </div>
                    <div class="col-md-1 d-flex align-items-center">
                        <button type="button" class="btn btn-sm btn-danger" onclick="eliminarInsumo(this)">X</button>
                    </div>
                </div>
            </div>
            <div class="card-footer">
                <button type="button" class="btn btn-sm btn-outline-dark" onclick="agregarInsumo()">Agregar insumo</button>
            </div>
        </div>
        <div class="d-flex justify-content-between">
            <button type="button" class="btn btn-secondary" id="prevBtn3">Anterior</button>
            <button type="button" class="btn btn-dark" id="nextBtn3">Siguiente</button>
        </div>
    </div>

    <!-- Paso 4: Equipos -->
    <div class="form-step" style="display:none;">
        <div class="card mb-4">
            <div class="card-header">Equipos por laboratorio</div>
            <div class="card-body">
                @* Agrupamos por laboratorio como antes *@
                @{
                    var equiposPorLab = ((List<AplicacionReservas.Models.Equipo>)ViewBag.Equipos)
                    .GroupBy(e => e.NombreLaboratorio)
                    .OrderBy(g => g.Key);
                }

                @foreach (var grupo in equiposPorLab)
                {
                    string labParaMostrar = grupo.Key;
                    if (grupo.Key.ToUpper().Contains("BIOTECNOLOGIA MOLECULAR"))
                        labParaMostrar = "-308 Biotecnologia Molecular";
                    else if (grupo.Key.ToUpper().Contains("BIOTECNOLOGIA INDUSTRIAL"))
                        labParaMostrar = "-309 Biotecnologia Industrial";
                    else if (grupo.Key.ToUpper().Contains("BIOTECNOLOGIA VEGETAL"))
                        labParaMostrar = "-310 Biotecnologia Vegetal";
                    else if (grupo.Key.ToUpper().Contains("BIOTECNOLOGIA APLICADA"))
                        labParaMostrar = "-311 Biotecnologia Aplicada";

                    <fieldset class="mb-3 border rounded p-3" data-laboratorio="@labParaMostrar">
                        <legend class="float-none w-auto px-2 fw-bold">@labParaMostrar</legend>

                        <!-- Sección: Uso individual -->
                        <h6 class="text-danger fw-bold">Equipos de uso individual</h6>
                        <div class="row mb-3">
                            @foreach (var equipo in grupo.Where(e => e.CapacidadGrupos == 1))
                            {
                                <div class="col-md-4">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="equipoIds" value="@equipo.Id" id="equipo-@equipo.Id" />
                                        <label class="form-check-label" for="equipo-@equipo.Id">@equipo.Nombre</label>
                                    </div>
                                </div>
                            }
                            @if (!grupo.Any(e => e.CapacidadGrupos == 1))
                            {
                                <div class="col-12">
                                    <small class="text-muted">No hay equipos de uso individual en este laboratorio.</small>
                                </div>
                            }
                        </div>

                        <!-- Sección: Uso compartido -->
                        <h6 class="text-success fw-bold">Equipos de uso compartido</h6>
                        <div class="row">
                            @foreach (var equipo in grupo.Where(e => e.CapacidadGrupos > 1))
                            {
                                <div class="col-md-4">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" name="equipoIds" value="@equipo.Id" id="equipo-@equipo.Id" />
                                        <label class="form-check-label" for="equipo-@equipo.Id">
                                            @equipo.Nombre <small class="text-muted">(Capacidad: @equipo.CapacidadGrupos grupos)</small>
                                        </label>
                                    </div>
                                </div>
                            }
                            @if (!grupo.Any(e => e.CapacidadGrupos > 1))
                            {
                                <div class="col-12">
                                    <small class="text-muted">No hay equipos de uso compartido en este laboratorio.</small>
                                </div>
                            }
                        </div>
                    </fieldset>
                }
            </div>
        </div>
        <div class="d-flex justify-content-between">
            <button type="button" class="btn btn-secondary" id="prevBtn4">Anterior</button>
            <button type="button" class="btn btn-dark" id="nextBtn4">Siguiente</button>
        </div>
    </div>

    <!-- Paso 5: Reactivos -->
    <div class="form-step" style="display:none;">
        <div class="card mb-4">
            <div class="card-header d-flex justify-content-between align-items-center">
                <span>
                    Reactivos
                </span>
                <div class="d-flex align-items-center">
                    <!-- Botones de busqueda de reactivos -->
                    <div class="input-group me-3">
                        <input type="text" id="busquedaReactivo" class="form-control" placeholder="Buscar reactivo..." />
                        <button class="btn btn-outline-dark" type="button" onclick="buscarReactivo()">
                            <i class="bi bi-search"></i>
                        </button>
                    </div>

                    <!-- Botones de paginación de reactivos -->
                    <div class="d-flex align-items-center">
                        <button type="button" class="btn btn-outline-dark me-2" id="prevPaginaReactivos"><i class="bi bi-arrow-left"></i></button>
                        <button type="button" class="btn btn-outline-dark" id="nextPaginaReactivos"><i class="bi bi-arrow-right"></i></button>
                    </div>
                </div>
            </div>

            <div class="card-body row g-3" id="listaReactivos">
                @foreach (var reactivo in ViewBag.Reactivos)
                {
                    <div class="col-md-12 d-flex align-items-center mb-2 reactivo-item"
                         data-nombre="@reactivo.Nombre.ToLower()"
                         data-codigo="@reactivo.Codigo.ToLower()"
                         id="reactivo-container-@reactivo.Id">

                        <div class="form-check me-3">
                            <input class="form-check-input" type="checkbox" name="reactivosSeleccionados" value="@reactivo.Id" id="reactivo-@reactivo.Id" onchange="toggleCantidad(this)" />
                            <label class="form-check-label" for="reactivo-@reactivo.Id">@reactivo.Codigo - @reactivo.Nombre</label>
                        </div>

                        <input type="number" name="cantidades[@reactivo.Id]" placeholder="Cantidad" class="form-control me-2 w-25" min="1" style="display:none;" />

                        <select name="unidades[@reactivo.Id]" class="form-select w-25" style="display:none;">
                            <option value="">Selecciona unidad</option>
                            @foreach (var unidad in ViewBag.Unidades)
                            {
                                <option value="@unidad.Nombre">@unidad.Nombre</option>
                            }
                        </select>
                    </div>
                }
            </div>
        </div>
        <div class="d-flex justify-content-between">
            <button type="button" class="btn btn-secondary" id="prevBtn5">Anterior</button>
            <button type="button" class="btn btn-dark" id="nextBtn5">Siguiente</button>
        </div>
    </div>

    <!-- Paso 6 Consideraciones Especiales -->
    <div class="form-step" style="display:none;">
        <div class="card mb-4">
            <div class="card-header">Consideraciones Especiales</div>
            <div class="col-md-12">
                    <textarea asp-for="ConsideracionesEspeciales" class="form-control" rows="3"></textarea>
            </div>
        </div>
        <div class="d-flex justify-content-between">
            <button type="button" class="btn btn-secondary" id="prevBtn6">Anterior</button>
            <button type="button" class="btn btn-dark" id="nextBtn6">Siguiente</button>
        </div>
    </div>

    <!-- Paso 7: Resumen -->
    <div class="form-step" style="display:none;">
        <div class="card mb-4">
            <div class="card-header">Resumen de la Reserva</div>
            <div class="card-body">
                <ul class="list-group" id="resumenReserva">
                    <!-- Aquí se llenará dinámicamente con JS -->
                </ul>
            </div>
        </div>
        <div class="d-flex justify-content-between">
            <button type="button" class="btn btn-secondary" id="prevBtn7">Anterior</button>
            <button type="submit" class="btn btn-dark text-white">Reservar</button>
        </div>
    </div>

</form>

@section Scripts {
    <script>
        const todosLosModulos = @Html.Raw(Json.Serialize(ViewBag.Modulos));
        const selectLab = document.getElementById("LaboratorioId");
        const fieldsets = document.querySelectorAll("[data-laboratorio]");
        // Variables para contar miembros e insumos
        let contadorMiembros = 1;
        let contadorInsumos = 1;
        // Variables para mostrar cierta cantidad de reactivos
        let paginaReactivosActual = 1;
        const itemsPorPagina = 10;

        // Funciones de agregar y eliminar miembros e insumos (igual que las tienes)
        function agregarMiembro() {
            const cont = document.getElementById("equipo-container");
            const miembrosActuales = cont.querySelectorAll('.miembro-item').length;

            if (miembrosActuales >= 4) {
                alert("Solo puedes agregar hasta 4 miembros en el equipo.");
                return;
            }

            const div = document.createElement("div");
            div.className = "row g-3 mb-3 miembro-item";
            div.innerHTML = `
                <div class="col-md-4">
                    <input name="miembros[${contadorMiembros}].Nombre" class="form-control" placeholder="Nombre del miembro" required />
                </div>
                <div class="col-md-1 d-flex align-items-center">
                    <button type="button" class="btn btn-sm btn-danger" onclick="eliminarMiembro(this)">X</button>
                </div>`;
            cont.appendChild(div);
            contadorMiembros++;
        }

        function eliminarMiembro(btn) {
            const cont = document.getElementById("equipo-container");
            const item = btn.closest('.miembro-item');
            cont.removeChild(item);
        }

        function agregarInsumo() {
            const cont = document.getElementById("insumo-container");
            const div = document.createElement("div");
            div.className = "row g-3 mb-3 insumo-item";
            div.innerHTML = `
                <div class="col-md-6">
                    <input name="insumos[${contadorInsumos}].Nombre" class="form-control" placeholder="Nombre del insumo" required />
                </div>
                <div class="col-md-4">
                    <input name="insumos[${contadorInsumos}].Cantidad" class="form-control" type="number" min="1" placeholder="Cantidad" required />
                </div>
                <div class="col-md-1 d-flex align-items-center">
                    <button type="button" class="btn btn-sm btn-danger" onclick="eliminarInsumo(this)">X</button>
                </div>`;
            cont.appendChild(div);
            contadorInsumos++;
        }

        function eliminarInsumo(btn) {
            const item = btn.closest('.insumo-item');
            item.remove();
        }

        // Funcion para mostrar los datos de los equipos por lab
        function filtrarEquipos() {
            const laboratorio = selectLab.options[selectLab.selectedIndex].text; // nombre del laboratorio
            fieldsets.forEach(f => {
                if (f.getAttribute("data-laboratorio") === laboratorio) {
                    f.style.display = "block"; // mostrar
                } else {
                    f.style.display = "none"; // ocultar
                }
            });
        }

        // Funcion para buscar reactivos
        function buscarReactivo() {
            let input = document.getElementById("busquedaReactivo").value.toLowerCase();
            let items = document.querySelectorAll(".reactivo-item");

            items.forEach(item => {
                let nombre = item.getAttribute("data-nombre");
                let codigo = item.getAttribute("data-codigo");

                if (nombre.includes(input) || codigo.includes(input)) {
                    item.classList.remove("d-none");
                } else {
                    item.classList.add("d-none");
                }
            });
        }

        // Ejecutar al cambiar el select
        selectLab.addEventListener("change", filtrarEquipos);

        // Opcional: ejecutar al cargar la página
        window.addEventListener("DOMContentLoaded", filtrarEquipos);

        // Mostrar/ocultar cantidad y unidad en reactivos
        function toggleCantidad(checkbox) {
            const container = checkbox.closest('.d-flex');
            const cantidadInput = container.querySelector('input[type="number"]');
            const unidadSelect = container.querySelector('select');
            const mostrar = checkbox.checked;

            if (cantidadInput) cantidadInput.style.display = mostrar ? 'inline-block' : 'none';
            if (unidadSelect) unidadSelect.style.display = mostrar ? 'inline-block' : 'none';
        }

        // Resumen antes de reservar:
        function llenarResumen() {
            const resumen = document.getElementById("resumenReserva");
            resumen.innerHTML = ""; // limpiar contenido

            // Paso 1: Información general
            const fecha = document.querySelector("input[name='Fecha']").value;
            const laboratorio = document.querySelector("select[name='LaboratorioId'] option:checked")?.textContent || "";
            const duracion = document.querySelector("#duracionReserva").value;
            const modulo = document.querySelector("#moduloHorario option:checked")?.textContent || "";
            const docente = document.querySelector("select[name='DocenteId'] option:checked")?.textContent || "";
            const materia = document.querySelector("input[name='Materia']").value;
            const proyecto = document.querySelector("input[name='NombreProyecto']").value;
            const actividad = document.querySelector("input[name='Actividad']").value;

            resumen.innerHTML += `<li class="list-group-item"><strong>Fecha:</strong> ${fecha}</li>`;
            resumen.innerHTML += `<li class="list-group-item"><strong>Laboratorio:</strong> ${laboratorio}</li>`;
            resumen.innerHTML += `<li class="list-group-item"><strong>Duración:</strong> ${duracion} hora(s)</li>`;
            resumen.innerHTML += `<li class="list-group-item"><strong>Módulo horario:</strong> ${modulo}</li>`;
            resumen.innerHTML += `<li class="list-group-item"><strong>Docente:</strong> ${docente}</li>`;
            resumen.innerHTML += `<li class="list-group-item"><strong>Materia:</strong> ${materia}</li>`;
            resumen.innerHTML += `<li class="list-group-item"><strong>Nombre del proyecto:</strong> ${proyecto}</li>`;
            resumen.innerHTML += `<li class="list-group-item"><strong>Actividad:</strong> ${actividad}</li>`;

            // Paso 2: Miembros
            const miembros = Array.from(document.querySelectorAll("#equipo-container input")).map(i => i.value).filter(v => v);
            if (miembros.length > 0) {
                resumen.innerHTML += `<li class="list-group-item"><strong>Miembros del equipo:</strong> ${miembros.join(", ")}</li>`;
            }

            // Paso 3: Insumos
            const insumos = Array.from(document.querySelectorAll("#insumo-container .insumo-item")).map(item => {
                const nombre = item.querySelector("input[name^='insumos']").value;
                const cantidad = item.querySelector("input[type='number']").value;
                return `${nombre} (${cantidad})`;
            }).filter(v => v);
            if (insumos.length > 0) {
                resumen.innerHTML += `<li class="list-group-item"><strong>Insumos:</strong> ${insumos.join(", ")}</li>`;
            }

            // Paso 4: Equipos
            const equipos = Array.from(document.querySelectorAll("input[name='equipoIds']:checked")).map(i => i.nextElementSibling.textContent.trim());
            if (equipos.length > 0) {
                resumen.innerHTML += `<li class="list-group-item"><strong>Equipos:</strong> ${equipos.join(", ")}</li>`;
            }

            // Paso 5: Reactivos
            const reactivos = Array.from(document.querySelectorAll("input[name='reactivosSeleccionados']:checked")).map(i => {
                const label = i.nextElementSibling.textContent.trim();
                const cantidad = i.closest(".reactivo-item").querySelector("input[type='number']").value;
                const unidad = i.closest(".reactivo-item").querySelector("select").value;
                return `${label} - ${cantidad} ${unidad}`;
            });
            if (reactivos.length > 0) {
                resumen.innerHTML += `<li class="list-group-item"><strong>Reactivos:</strong> ${reactivos.join(", ")}</li>`;
            }

            // Paso 6: Consideraciones especiales
            const consideraciones = document.querySelector("textarea[name='ConsideracionesEspeciales']").value;
            if (consideraciones) {
                resumen.innerHTML += `<li class="list-group-item"><strong>Consideraciones especiales:</strong> ${consideraciones}</li>`;
            }
        }

        // Mostrar los horarios correspondientes
        document.getElementById("duracionReserva").addEventListener("change", function () {
            const duracionSeleccionada = parseInt(this.value);
            const moduloSelect = document.getElementById("moduloHorario");

            // Limpiar opciones actuales
            moduloSelect.innerHTML = '<option value="">Seleccione módulo horario</option>';

            // Filtrar y agregar los módulos compatibles
            const modulosFiltrados = todosLosModulos.filter(m => m.duracionHoras === duracionSeleccionada);

            modulosFiltrados.forEach(m => {
                const option = document.createElement("option");
                option.value = m.id;
                option.textContent = m.nombre;
                moduloSelect.appendChild(option);
            });
        });

        // Control de pasos
        const steps = document.querySelectorAll(".form-step");
        let currentStep = 0;

        function showStep(index) {
            steps.forEach((step, i) => {
                step.style.display = (i === index) ? "block" : "none";
            });
        }

        showStep(currentStep);

        document.getElementById("nextBtn1").addEventListener("click", () => {
            currentStep = 1;
            showStep(currentStep);
        });

        document.getElementById("prevBtn2").addEventListener("click", () => {
            currentStep = 0;
            showStep(currentStep);
        });
        document.getElementById("nextBtn2").addEventListener("click", () => {
            currentStep = 2;
            showStep(currentStep);
        });

        document.getElementById("prevBtn3").addEventListener("click", () => {
            currentStep = 1;
            showStep(currentStep);
        });
        document.getElementById("nextBtn3").addEventListener("click", () => {
            currentStep = 3;
            showStep(currentStep);
        });

        document.getElementById("prevBtn4").addEventListener("click", () => {
            currentStep = 2;
            showStep(currentStep);
        });
        document.getElementById("nextBtn4").addEventListener("click", () => {
            currentStep = 4;
            showStep(currentStep);
        });

        document.getElementById("prevBtn5").addEventListener("click", () => {
            currentStep = 3;
            showStep(currentStep);
        });

        document.getElementById("nextBtn5").addEventListener("click", () => {
            currentStep = 5;
            showStep(currentStep);
            mostrarPaginaReactivos(); // ahora sí se aplicará la paginación
        });

        document.getElementById("prevBtn6").addEventListener("click", () => {
            currentStep = 4;
            showStep(currentStep);
        });

        document.getElementById("nextBtn6").addEventListener("click", () => {
            currentStep = 6; // Paso 7 (0-indexed)
            showStep(currentStep);
            llenarResumen();
        });

        document.getElementById("prevBtn7").addEventListener("click", () => {
            currentStep = 5; // Paso 6
            showStep(currentStep);
        });


        function showStep(index) {
            steps.forEach((step, i) => {
                step.style.display = (i === index) ? "block" : "none";
            });

            // Actualizar barra de progreso
            const progreso = document.getElementById("barraProgreso");
            const total = steps.length;
            const pasoActual = index + 1;
            const porcentaje = (pasoActual / total) * 100;

            progreso.style.width = `${porcentaje}%`;
            progreso.setAttribute("aria-valuenow", pasoActual);
            progreso.textContent = `Paso ${pasoActual} de ${total}`;

            // Scroll al inicio del formulario
            window.scrollTo({ top: 0, behavior: "smooth" });
        }
    </script>
}
